-- programs

entrypoints Program ;

Program.   Program ::= Stmt ;

Arg.       Arg     ::= ArgMod Ident ":" Type ;
separator  Arg "," ;

--statements

Skip.        Stmt5 ::= "skip" ;
Skip.        Stmt5 ::= "" ;
EStmt.       Stmt5 ::= Expr ;
Break.       Stmt5 ::= "break" ;
Continue.    Stmt5 ::= "continue" ;
Ret.         Stmt5 ::= "return" Expr ;
VRet.        Stmt5 ::= "return" ;
VarDef.      Stmt5 ::= "def" Ident ":" FullType "=" Expr1 ;
Ass.         Stmt5 ::= Ident "=" Expr1 ;

FnDef.       Stmt4 ::= "def" Ident ":" FullType "(" [Arg] ")" Stmt5 ;

Cond.        Stmt1 ::= "if" Expr ":" Stmt1 ;
CondElse.    Stmt1 ::= "if" Expr ":" Stmt1 "else" Stmt1 ;
While.       Stmt1 ::= "while" Expr ":" Stmt1 ;
ForList.     Stmt1 ::= "for" Ident "from" Expr ":" Stmt1 ;
ForRange.    Stmt1 ::= "for" Ident "from" Expr "to" Expr ":" Stmt1 ;

Composition. Stmt  ::= Stmt ";" Stmt1 ;

_. Stmt  ::= Stmt1 ;
_. Stmt1 ::= Stmt2 ;
_. Stmt2 ::= Stmt3 ;
_. Stmt3 ::= Stmt4 ;
_. Stmt4 ::= Stmt5 ;
_. Stmt5 ::= "{" Stmt "}" ;

-- types

Int.      Type     ::= "int" ;
Str.      Type     ::= "string" ;
Bool.     Type     ::= "boolean" ;
Void.     Type     ::= "void" ;
Float.    Type     ::= "float" ;
List.     Type     ::= "<<" FullType ">>" ;
Array.    Type     ::= "[" FullType "]" ;
Fun.      Type     ::= "(" [ArgType] ")" "->" FullType ;
ArgType.  ArgType  ::= ArgMod Type ;
FullType. FullType ::= [TypeMod] Type ;
separator ArgType "," ;

-- argument modifiers

AModVar.   ArgMod ::= "var" ;
AModVal.   ArgMod ::= "val" ;
AModInOut. ArgMod ::= "inout" ;

-- type modifiers

TModReadonly. TypeMod ::= "readonly" ;
separator TypeMod "" ;

-- expressions

EVar.      Expr8 ::= Ident ;
ELitInt.   Expr8 ::= Integer ;
ELitTrue.  Expr8 ::= "true" ;
ELitFalse. Expr8 ::= "false" ;
EString.   Expr8 ::= String ;
ELitFloat. Expr8 ::= Double ;

Neg.       Expr7 ::= "-" Expr8 ;
Not.       Expr7 ::= "!" Expr8 ;

EMul.      Expr6 ::= Expr6 MulOp Expr7 ;

EAdd.      Expr5 ::= Expr5 AddOp Expr6 ;

ERel.      Expr4 ::= Expr4 RelOp Expr5 ;

EAnd.      Expr3 ::= Expr4 AndOp Expr3 ;

EOr.       Expr2 ::= Expr3 OrOp Expr2 ;

ELambda.   Expr1 ::= "lambda" ":" FullType "(" [Arg] ")" "->" Stmt1 ;
ERand.     Expr1 ::= "random" "from" Expr2 ;
ERandDist. Expr1 ::= "random" "from" Expr2 "distribution" Expr2 ;
EProb.     Expr1 ::= "probability" "of" Stmt1 "satisfying" Expr2 ;
EProbSamp. Expr1 ::= "probability" "tested" Expr2 "times" "of" Stmt1 "satisfying" Expr2 ;

EList.     Expr ::= "<<" [Expr] ">>" ;
EArray.    Expr ::= "[" [Expr] "]" ;
EApp.      Expr ::= Ident "(" [Expr] ")" ;

coercions Expr 8 ;
separator Expr "," ;

-- operators

Plus.   AddOp ::= "+" ;
Minus.  AddOp ::= "-" ;
Times.  MulOp ::= "*" ;
Div.    MulOp ::= "/" ;
Mod.    MulOp ::= "%" ;
LTH.    RelOp ::= "<" ;
LE.     RelOp ::= "<=" ;
GTH.    RelOp ::= ">" ;
GE.     RelOp ::= ">=" ;
EQU.    RelOp ::= "==" ;
NE.     RelOp ::= "!=" ;
Or.     OrOp  ::= "or" ;
OrSym.  OrOp  ::= "||" ;
And.    AndOp ::= "and" ;
AndSym. AndOp ::= "&&" ;

-- comments
comment "#" ;
comment "//" ;
comment "--" ;
comment "/*" "*/" ;
