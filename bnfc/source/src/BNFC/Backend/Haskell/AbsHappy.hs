{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
module BNFC.Backend.Haskell.AbsHappy where

-- Haskell module generated by the BNF converter


import Data.Data (Data,Typeable)
import GHC.Generics (Generic)
newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)
newtype Terminal = Terminal String
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)
data Production = P Ident Type [RightHandSide]
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data RightHandSide = Rhs [Symbol] Expression
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Symbol = NonTerm Ident | QuotedTerm Terminal | IdentTerm Ident
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Expression
    = EIdent Ident
    | EPair Expression Expression
    | EApp Expression Expression
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

data Type
    = TIdent Ident | TPair Type Type | TList Type | TApp Type Type
  deriving (Eq, Ord, Show, Read, Data, Typeable, Generic)

